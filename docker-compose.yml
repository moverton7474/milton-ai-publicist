# Milton AI Publicist - Docker Compose Configuration
# Production-ready setup with PostgreSQL and Redis

version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: milton-publicist-app
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://milton_user:${DB_PASSWORD}@postgres:5432/milton_publicist
      - REDIS_URL=redis://redis:6379/0
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - MILTON_USER_ID=${MILTON_USER_ID}
      - SECRET_KEY=${SECRET_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - TEST_MODE=false
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - milton-network

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: milton-publicist-db
    environment:
      - POSTGRES_USER=milton_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=milton_publicist
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - milton-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U milton_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis cache
  redis:
    image: redis:7-alpine
    container_name: milton-publicist-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - milton-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Optional: Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: milton-publicist-prometheus
    profiles: ["monitoring"]
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - milton-network

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: milton-publicist-grafana
    profiles: ["monitoring"]
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - milton-network

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  milton-network:
    driver: bridge
